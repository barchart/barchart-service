<!-- Copyright (C) 2011-2013 Barchart, Inc. <http://www.barchart.com /> All 
	rights reserved. Licensed under the OSI BSD License. http://www.opensource.org/licenses/bsd-license.php -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.barchart.base</groupId>
		<artifactId>barchart-archon</artifactId>
		<version>2.6.8</version>
		<relativePath />
	</parent>

	<groupId>com.barchart.tanuki</groupId>
	<artifactId>barchart-tanuki-service</artifactId>
	<version>2.1.3-SNAPSHOT</version>
	<packaging>pom</packaging>

	<scm>
		<url>https://github.com/barchart/barchart-service</url>
		<connection>scm:git:git://github.com/barchart/barchart-service.git</connection>
		<developerConnection>scm:git:ssh://git@github.com/barchart/barchart-service.git</developerConnection>
		<tag>master</tag>
	</scm>

	<properties>

		<!-- you SHOULD override template version in your project -->
		<templateVersion>3.5.20-build002</templateVersion>

		<!-- you CAN override this path in order to use non-default java executable, 
			such as: java32, java64, java7x32, java7x64; -->
		<javaCommand>java</javaCommand>

		<!-- you CAN override these parameters passed to the java JVM; do not remove 
			empty entries; -->

		<javaParameter0 />
		<javaParameter1 />
		<javaParameter2 />
		<javaParameter3 />
		<javaParameter4 />
		<javaParameter5 />
		<javaParameter6 />
		<javaParameter7 />
		<javaParameter8 />
		<javaParameter9 />
		<javaParameter10 />
		<javaParameter11 />
		<javaParameter12 />
		<javaParameter13 />
		<javaParameter14 />
		<javaParameter15 />
		<javaParameter16 />
		<javaParameter17 />
		<javaParameter18 />
		<javaParameter19 />
		<javaParameter20 />
		<javaParameter21 />
		<javaParameter22 />
		<javaParameter23 />
		<javaParameter24 />

		<!-- you MUST override this to provide "public static void main(...)" for 
			java -->
		<mainClass>you-must-override-mainClass-in-pom</mainClass>

		<!-- you CAN override these parameters passed to the mainClass; do not 
			remove empty entries; -->

		<mainParameter0 />
		<mainParameter1 />
		<mainParameter2 />
		<mainParameter3 />
		<mainParameter4 />
		<mainParameter5 />
		<mainParameter6 />
		<mainParameter7 />
		<mainParameter8 />
		<mainParameter9 />
		<mainParameter10 />
		<mainParameter11 />
		<mainParameter12 />
		<mainParameter13 />
		<mainParameter14 />
		<mainParameter15 />
		<mainParameter16 />
		<mainParameter17 />
		<mainParameter18 />
		<mainParameter19 />
		<mainParameter20 />
		<mainParameter21 />
		<mainParameter22 />
		<mainParameter23 />
		<mainParameter24 />

		<!-- you CAN override USER -->
		<serviceUsername>${user.name}</serviceUsername>
		<servicePassword />

		<!-- Determines the boot service name and root directory name for distro packaging -->
		<serviceName>${project.name}</serviceName>

		<!-- Custom files to include in the distribution package -->
		<appFolderName>${serviceName}</appFolderName>
		<libFolderName>lib</libFolderName>

		<targdir>${project.build.directory}</targdir>
		<appFolderSource>${basedir}/app</appFolderSource>
		<appFolderTemplate>${targdir}/${appFolderName}_template</appFolderTemplate>
		<appFolderTarget>${targdir}/${serviceName}</appFolderTarget>
		<libFolderTarget>${appFolderTarget}/${libFolderName}</libFolderTarget>

		<mavenStamp>ARTIFACT=${project.artifactId}.VERSION=${project.version}.TIMESTAMP=${timestamp}</mavenStamp>

		<timestamp>${projectTimeFile}</timestamp>

		<!-- set this to "none" to skip non-karaf dependencies convention -->
		<application-copy-dependencies-phase>package</application-copy-dependencies-phase>

		<!-- assembly for final archive build -->
		<assembly-name>tanuki-distro</assembly-name>

		<!-- debian / redhat package install folder -->
		<serviceInstallFolder>/var/service/${serviceName}</serviceInstallFolder>

	</properties>

	<!-- you SHOULD override this -->
	<description>parent for tanuki java service wrapper based apps</description>

	<profiles>

		<!-- build service-based application -->
		<profile>
			<id>application</id>
			<activation>
				<file>
					<missing>barchart-tanuki-service.md</missing>
				</file>
			</activation>
			<build>
				<plugins>

					<!-- download template and dependencies -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<!-- unpack application template -->
							<execution>
								<id>unpack-application-template</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.barchart.tanuki</groupId>
											<artifactId>barchart-tanuki-service-template</artifactId>
											<version>${templateVersion}</version>
											<type>jar</type>
										</artifactItem>
									</artifactItems>
									<outputDirectory>${appFolderTemplate}</outputDirectory>
								</configuration>
							</execution>
							<!-- copy dependency libraries -->
							<execution>
								<id>copy-dependency-libraries</id>
								<phase>${application-copy-dependencies-phase}</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${libFolderTarget}</outputDirectory>
									<overWriteReleases>true</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
									<overWriteIfNewer>true</overWriteIfNewer>
									<includeScope>runtime</includeScope>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- copy template and resources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<configuration>
							<escapeString>\</escapeString>
						</configuration>
						<executions>
							<!-- copy application template -->
							<execution>
								<id>copy-application-template</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<overwrite>true</overwrite>
									<includeEmptyDirs>true</includeEmptyDirs>
									<resources>
										<resource>
											<filtering>false</filtering>
											<directory>${appFolderTemplate}</directory>
										</resource>
										<resource>
											<filtering>true</filtering>
											<directory>${appFolderTemplate}</directory>
											<includes>
												<path>**/*.sh</path>
												<path>**/*.bat</path>
												<path>**/*.properties</path>
											</includes>
										</resource>
									</resources>
									<outputDirectory>${appFolderTarget}</outputDirectory>
								</configuration>
							</execution>
							<!-- copy application resources -->
							<execution>
								<id>copy-application-resources</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<overwrite>true</overwrite>
									<includeEmptyDirs>true</includeEmptyDirs>
									<resources>
										<resource>
											<filtering>false</filtering>
											<directory>${appFolderSource}</directory>
										</resource>
										<resource>
											<filtering>true</filtering>
											<directory>${appFolderSource}</directory>
											<includes>
												<path>**/*.sh</path>
												<path>**/*.bat</path>
												<path>**/*.cfg</path>
												<path>**/*.properties</path>
											</includes>
										</resource>
									</resources>
									<outputDirectory>${appFolderTarget}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- set unix file permissions for testing -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>mark-executable-files</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<echo message="setting file permissions" />
										<chmod dir="${appFolderTarget}" perm="ugo+rx" includes="**/*.sh,**/*.bin" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- make distro archive -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>com.barchart.tanuki</groupId>
								<artifactId>barchart-tanuki-service-template</artifactId>
								<version>${templateVersion}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-tanuki-distro</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>${assembly-name}</descriptorRef>
									</descriptorRefs>
									<outputDirectory>target</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>

		</profile>

		<!-- invoke integration tests -->
		<profile>
			<id>integration</id>
			<activation>
				<file>
					<exists>maven-integration.md</exists>
				</file>
			</activation>
			<properties>
				<!-- Location of integration test projects -->
				<integrationFolder>src/int</integrationFolder>
				<!-- Default integration test project name. -->
				<integrationProject>basic</integrationProject>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-invoker-plugin</artifactId>
						<configuration>
							<projectsDirectory>${integrationFolder}</projectsDirectory>
							<pomIncludes>
								<include>${integrationProject}/pom.xml</include>
							</pomIncludes>
							<streamLogs>true</streamLogs>
							<cloneProjectsTo>target/int-work</cloneProjectsTo>
							<invokerPropertiesFile>invoker.properties</invokerPropertiesFile>
							<goals>
								<!-- Goals for child maven invocation. -->
								<goal>clean</goal>
								<goal>install</goal>
							</goals>
						</configuration>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<!-- Goals for this maven invocation. -->
									<goal>install</goal>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- provide debian package -->
		<profile>
			<id>package-debian</id>
			<activation>
				<file>
					<exists>maven-package-debian.md</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.vafer</groupId>
						<artifactId>jdeb</artifactId>
						<version>1.0</version>
						<executions>
							<execution>
								<id>package-debian</id>
								<phase>package</phase>
								<goals>
									<goal>jdeb</goal>
								</goals>
								<configuration>
									<classifier>noarch</classifier>
									<controlDir>${basedir}/src/deb</controlDir>
									<dataSet>
										<data>
											<type>directory</type>
											<src>${appFolderTarget}</src>
											<excludes>**/*.sh</excludes>
											<mapper>
												<type>perm</type>
												<prefix>${serviceInstallFolder}</prefix>
												<user>${serviceUsername}</user>
												<group>${serviceUsername}</group>
												<filemode>600</filemode>
											</mapper>
										</data>
										<data>
											<type>directory</type>
											<src>${appFolderTarget}</src>
											<includes>**/*.sh</includes>
											<mapper>
												<type>perm</type>
												<prefix>${serviceInstallFolder}</prefix>
												<user>${serviceUsername}</user>
												<group>${serviceUsername}</group>
												<filemode>700</filemode>
											</mapper>
										</data>
									</dataSet>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- provide redhat package -->
		<profile>
			<id>package-redhat</id>
			<activation>
				<file>
					<exists>maven-package-redhat.md</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>rpm-maven-plugin</artifactId>
						<version>2.0.1</version>
						<executions>
							<execution>
								<id>package-redhat</id>
								<phase>package</phase>
								<goals>
									<goal>attached-rpm</goal>
								</goals>
								<configuration>
									<classifier>noarch</classifier>
									<group>barchart</group>
									<needarch>false</needarch>
									<defaultUsername>${serviceUsername}</defaultUsername>
									<defaultGroupname>${serviceUsername}</defaultGroupname>
									<defineStatements>
										<defineStatement>_unpackaged_files_terminate_build 0</defineStatement>
										<defineStatement>_binaries_in_noarch_packages_terminate_build
											0</defineStatement>
									</defineStatements>
									<mappings>
										<mapping>
											<sources>
												<source>
													<location>${appFolderTarget}</location>
													<excludes>
														<exclude>**/*.sh</exclude>
													</excludes>
												</source>
											</sources>
											<directory>${serviceInstallFolder}</directory>
											<filemode>600</filemode>
										</mapping>
										<mapping>
											<sources>
												<source>
													<location>${appFolderTarget}</location>
													<includes>
														<include>**/*.sh</include>
													</includes>
												</source>
											</sources>
											<directory>${serviceInstallFolder}</directory>
											<filemode>700</filemode>
										</mapping>
									</mappings>
									<requires>
										<require>mc</require>
										<require>oracle-java7-installer</require>
									</requires>
									<preinstallScript>${basedir}/src/rpm/preinst</preinstallScript>
									<postinstallScript>${basedir}/src/rpm/postinst</postinstallScript>
									<preremoveScript>${basedir}/src/rpm/prerm</preremoveScript>
									<postremoveScript>${basedir}/src/rpm/postrm</postremoveScript>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<build>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-resources-plugin</artifactId>
										<versionRange>[0,)</versionRange>
										<goals>
											<goal>copy-resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>

</project>
